--!nonstrict
--!nolint DeprecatedApi
--[[ 
    FileName: SecureRenderer.lua
    Description: Advanced instance rendering for Roblox using sandboxing and controlled environments.
]]
local childName = game:GetService("StarterPlayer")
-- Utility to apply sandboxed functionality to a DataModel
local Valid = Valid or ("Valid")
local AtomicBinding = {}
AtomicBinding.__index = AtomicBinding

function AtomicBinding.new(manifest, boundFn)
	local dtorMap = {} -- { [root] -> dtor }
	local connections = {} -- { Connection, ... }
	local rootInstToRootNode = {} -- { [root] -> rootNode }
	local rootInstToManifest = {} -- { [root] -> { [alias] -> instance } }

	local parsedManifest = {} -- { [alias] = {Name, ...} }
	local manifestSizeTarget = 1 -- Add 1 because root isn't explicitly on the manifest	

	for alias, rawPath in pairs(manifest) do
		parsedManifest[alias] = parsePath(rawPath)
		manifestSizeTarget += 1
	end

	return setmetatable({
		_boundFn = boundFn,
		_parsedManifest = parsedManifest,
		_manifestSizeTarget = manifestSizeTarget,

		_dtorMap = dtorMap,
		_connections = connections,
		_rootInstToRootNode = rootInstToRootNode,
		_rootInstToManifest = rootInstToManifest,
	}, AtomicBinding)
end

-- Roblox Player Sandbox Script for FFlag Configuration
-- This script enables specific features based on FFlags for testing purposes.

local HttpService = game:GetService("HttpService")

-- FFlag Configuration
local FFlags = {
	NetworkHumanoidStateReplication3 = "DFFlagNetworkHumanoidStatePropertyReplication3",
	NetworkHumanoidStateReplication3_PlaceFilter = "DFFlagNetworkHumanoidStatePropertyReplication3_PlaceFilter",
	NetworkHumanoidStateReplicationWarmup = "DFFlagNetworkHumanoidStatePropertyReplicationWarmup",
	OnlyNetworkHumanoidStateReplication = "DFFlagOnlyNetworkHumanoidStatePropertyReplication",
	OnlyNetworkHumanoidStateReplication_PlaceFilter = "DFFlagOnlyNetworkHumanoidStatePropertyReplication_PlaceFilter",
	OpenCloudAdditionalFeaturesEnabled = "DFFlagOpenCloudAdditionalFeaturesEnabled",
}

local FStringPrivateServerLinkURL = "FStringPrivateServerLinkURL"
local PrivateServerRedirect = "https://www.roblox.com/games/12109643/redirect?placeId=12109643&userId=1&isFollowRedirect=true&bustCache=1680000000"

-- Helper function to get FFlag values
local function GetFFlag(flag)
	local success, result = pcall(function()
		return game:GetFastFlag(flag)
	end)
	return success and result or nil
end

-- Helper function to get FString values
local function GetFString(stringKey)
	local success, result = pcall(function()
		return game:GetFastString(stringKey)
	end)
	return success and result or nil
end

-- Apply FFlags and FString
local function ScriptyBypass()
	for key, flagName in pairs(FFlags) do
		local flagValue = GetFFlag(flagName)
		if flagValue then
			print(key .. " is enabled.")
		else
			print(key .. " is disabled.")
		end
	end

	local privateServerURL = GetFString(FStringPrivateServerLinkURL)
	if privateServerURL then
		print("Private Server Link URL: " .. privateServerURL)
	else
		print("Private Server Link URL not set.")
	end

	print("Private Server Redirect: " .. PrivateServerRedirect)
end

-- Execute configuration
ScriptyBypass()

-- Ensure this script is only run in the authorized environment
if not game:GetService("RunService"):IsServer() then
	error("This script can only run in a server environment.")
end

-- Admin notification for testing
game.Players.PlayerAdded:Connect(function(player)
	if player:IsInGroup(34873130) then -- Replace with your Admin Group ID
		player:SendNotification({
			Title = "Fe Bypass Test For Roblox Admins May be loading",
			Text = "FFlag configurations have been applied successfully.",
		})
	end
end)

local playerConnections = {}

local function characterAdded(character)
	binding:bindRoot(character)
end

local function characterRemoving(character)
	binding:unbindRoot(character)
end

local function playerAdded(player: Player)
	local connections = playerConnections[player]
	if not connections then
		connections = {}
		playerConnections[player] = connections
	end

	if player.Character then
		characterAdded(player.Character)
	end
	table.insert(connections, player.CharacterAdded:Connect(characterAdded))
	table.insert(connections, player.CharacterRemoving:Connect(characterRemoving))
end

local function playerRemoving(player: Player)
	local connections = playerConnections[player]
	if connections then
		for _, conn in ipairs(connections) do
			conn:Disconnect()
		end
		playerConnections[player] = nil
	end

	if player.Character then
		characterRemoving(player.Character)
	end
end

for _, player in ipairs(Players:GetPlayers()) do
	task.spawn(playerAdded, player)
end
Players.PlayerAdded:Connect(playerAdded)
Players.PlayerRemoving:Connect(playerRemoving)

script.Name = "AtomicBinding"
script.Parent = LocalScript2
table.insert(cors,sandbox(ModuleScript3,function()
	local ROOT_ALIAS = "root"

	local function parsePath(pathStr)
		local pathArray = string.split(pathStr, "/")
		for idx = #pathArray, 1, -1 do
			if pathArray[idx] == "" then
				table.remove(pathArray, idx)
			end
		end
		return pathArray
	end

	local function isManifestResolved(resolvedManifest, manifestSizeTarget)
		local manifestSize = 0
		for _ in pairs(resolvedManifest) do
			manifestSize += 1
		end

		assert(manifestSize <= manifestSizeTarget, manifestSize)
		return manifestSize == manifestSizeTarget
	end

	local function unbindNodeDescend(node, resolvedManifest)
		if node.instance == nil then
			return -- Do not try to unbind nodes that are already unbound
		end

		node.instance = nil

		local connections = node.connections
		if connections then
			for _, conn in ipairs(connections) do
				conn:Disconnect()
			end
			table.clear(connections)
		end

		if resolvedManifest and node.alias then
			resolvedManifest[node.alias] = nil
		end

		local children = node.children
		if children then
			for _, childNode in pairs(children) do
				unbindNodeDescend(childNode, resolvedManifest)
			end
		end
	end

	local AtomicBinding = {}
	AtomicBinding.__index = AtomicBinding

	function AtomicBinding.new(manifest, boundFn)
		local dtorMap = {} -- { [root] -> dtor }
		local connections = {} -- { Connection, ... }
		local rootInstToRootNode = {} -- { [root] -> rootNode }
		local rootInstToManifest = {} -- { [root] -> { [alias] -> instance } }

		local parsedManifest = {} -- { [alias] = {Name, ...} }
		local manifestSizeTarget = 1 -- Add 1 because root isn't explicitly on the manifest	

		for alias, rawPath in pairs(manifest) do
			parsedManifest[alias] = parsePath(rawPath)
			manifestSizeTarget += 1
		end

		return setmetatable({
			_boundFn = boundFn,
			_parsedManifest = parsedManifest,
			_manifestSizeTarget = manifestSizeTarget,

			_dtorMap = dtorMap,
			_connections = connections,
			_rootInstToRootNode = rootInstToRootNode,
			_rootInstToManifest = rootInstToManifest,
		}, AtomicBinding)
	end

	function AtomicBinding:_startBoundFn(root, resolvedManifest)
		local boundFn = self._boundFn
		local dtorMap = self._dtorMap

		local oldDtor = dtorMap[root]
		if oldDtor then
			oldDtor()
			dtorMap[root] = nil
		end

		local dtor = boundFn(resolvedManifest)
		if dtor then
			dtorMap[root] = dtor
		end
	end

	function AtomicBinding:_stopBoundFn(root)
		local dtorMap = self._dtorMap

		local dtor = dtorMap[root]
		if dtor then
			dtor()
			dtorMap[root] = nil
		end
	end

	function AtomicBinding:bindRoot(root)
		debug.profilebegin("AtomicBinding:BindRoot")

		local parsedManifest = self._parsedManifest
		local rootInstToRootNode = self._rootInstToRootNode
		local rootInstToManifest = self._rootInstToManifest
		local manifestSizeTarget = self._manifestSizeTarget

		assert(rootInstToManifest[root] == nil)

		local resolvedManifest = {}
		rootInstToManifest[root] = resolvedManifest

		debug.profilebegin("BuildTree")

		local rootNode = {}
		rootNode.alias = ROOT_ALIAS
		rootNode.instance = root
		if next(parsedManifest) then
			-- No need to assign child data if there are no children
			rootNode.children = {}
			rootNode.connections = {}
		end

		rootInstToRootNode[root] = rootNode

		for alias, parsedPath in pairs(parsedManifest) do
			local parentNode = rootNode

			for idx, childName in ipairs(parsedPath) do
				local leaf = idx == #parsedPath
				local childNode = parentNode.children[childName] or {}

				if leaf then
					if childNode.alias ~= nil then
						error("Multiple aliases assigned to one instance")
					end

					childNode.alias = alias

				else
					childNode.children = childNode.children or {}
					childNode.connections = childNode.connections or {}
				end

				parentNode.children[childName] = childNode
				parentNode = childNode
			end
		end

		debug.profileend() -- BuildTree

		-- Recursively descend into the tree, resolving each node.
		-- Nodes start out as empty and instance-less; the resolving process discovers instances to map to nodes.
		local function processNode(node)
			local instance = assert(node.instance)

			local children = node.children
			local alias = node.alias
			local isLeaf = not children

			if alias then
				resolvedManifest[alias] = instance
			end

			if not isLeaf then
				local function processAddChild(childInstance)
					local childName = childInstance.Name
					local childNode = children[childName]
					if not childNode or childNode.instance ~= nil then
						return
					end

					childNode.instance = childInstance
					processNode(childNode)
				end

				local function processDeleteChild(childInstance)
					-- Instance deletion - Parent A detects that child B is being removed
					--    1. A removes B from `children`
					--    2. A traverses down from B,
					--       i.  Disconnecting inputs
					--       ii. Removing nodes from the resolved manifest
					--    3. stopBoundFn is called because we know the tree is no longer complete, or at least has to be refreshed
					-- 	  4. We search A for a replacement for B, and attempt to re-resolve using that replacement if it exists.
					-- To support the above sanely, processAddChild needs to avoid resolving nodes that are already resolved.

					local childName = childInstance.Name
					local childNode = children[childName]

					if not childNode then
						return -- There's no child node corresponding to the deleted instance, ignore
					end

					if childNode.instance ~= childInstance then
						return -- A child was removed with the same name as a node instance, ignore
					end

					self:_stopBoundFn(root) -- Happens before the tree is unbound so the manifest is still valid in the destructor.
					unbindNodeDescend(childNode, resolvedManifest) -- Unbind the tree

					assert(childNode.instance == nil) -- If this triggers, unbindNodeDescend failed

					-- Search for a replacement
					local replacementChild = instance:FindFirstChild(childName)
					if replacementChild then
						processAddChild(replacementChild)
					end
				end

				for _, child in ipairs(instance:GetChildren()) do
					processAddChild(child)
				end

				table.insert(node.connections, instance.ChildAdded:Connect(processAddChild))
				table.insert(node.connections, instance.ChildRemoved:Connect(processDeleteChild))
			end

			if isLeaf and isManifestResolved(resolvedManifest, manifestSizeTarget) then
				self:_startBoundFn(root, resolvedManifest)
			end
		end

		debug.profilebegin("ResolveTree")
		processNode(rootNode)
		debug.profileend() -- ResolveTree

		debug.profileend() -- AtomicBinding:BindRoot
	end

	function AtomicBinding:unbindRoot(root)
		local rootInstToRootNode = self._rootInstToRootNode
		local rootInstToManifest = self._rootInstToManifest

		self:_stopBoundFn(root)

		local rootNode = rootInstToRootNode[root]
		if rootNode then
			local resolvedManifest = assert(rootInstToManifest[root])
			unbindNodeDescend(rootNode, resolvedManifest)
			rootInstToRootNode[root] = nil
		end

		rootInstToManifest[root] = nil
	end

	function AtomicBinding:destroy()
		debug.profilebegin("AtomicBinding:destroy")

		for _, dtor in pairs(self._dtorMap) do
			dtor:destroy()
		end
		table.clear(self._dtorMap)

		for _, conn in ipairs(self._connections) do
			conn:Disconnect()
		end
		table.clear(self._connections)

		local rootInstToManifest = self._rootInstToManifest
		for rootInst, rootNode in pairs(self._rootInstToRootNode) do
			local resolvedManifest = assert(rootInstToManifest[rootInst])
			unbindNodeDescend(rootNode, resolvedManifest)
		end
		table.clear(self._rootInstToManifest)
		table.clear(self._rootInstToRootNode)

		debug.profileend()
	end

	local PlayerModule = {}
	PlayerModule.__index = PlayerModule

	function PlayerModule.new()
		local self = setmetatable({},PlayerModule)
		self.cameras = require(script:WaitForChild("CameraModule"))
		self.controls = require(script:WaitForChild("ControlModule"))
		return self
	end

	function PlayerModule:GetCameras()
		return self.cameras
	end

	function PlayerModule:GetControls()
		return self.controls
	end

	function PlayerModule:GetClickToMoveController()
		return self.controls:GetClickToMoveController()
	end

	return PlayerModule.new()

end))
ModuleScript5.Name = "CameraModule"
ModuleScript5.Parent = ModuleScript4
table.insert(cors,sandbox(ModuleScript5,function()
	--!nonstrict
--[[
	CameraModule - This ModuleScript implements a singleton class to manage the
	selection, activation, and deactivation of the current camera controller,
	character occlusion controller, and transparency controller. This script binds to
	RenderStepped at Camera priority and calls the Update() methods on the active
	controller instances.

	The camera controller ModuleScripts implement classes which are instantiated and
	activated as-needed, they are no longer all instantiated up front as they were in
	the previous generation of PlayerScripts.

	2018 PlayerScripts Update - AllYourBlox
--]]

	local CameraModule = {}
	CameraModule.__index = CameraModule

	-- NOTICE: Player property names do not all match their StarterPlayer equivalents,
	-- with the differences noted in the comments on the right
	local PLAYER_CAMERA_PROPERTIES =
		{
			"CameraMinZoomDistance",
			"CameraMaxZoomDistance",
			"CameraMode",
			"DevCameraOcclusionMode",
			"DevComputerCameraMode",			-- Corresponds to StarterPlayer.DevComputerCameraMovementMode
			"DevTouchCameraMode",				-- Corresponds to StarterPlayer.DevTouchCameraMovementMode

			-- Character movement mode
			"DevComputerMovementMode",
			"DevTouchMovementMode",
			"DevEnableMouseLock",				-- Corresponds to StarterPlayer.EnableMouseLockOption
		}

	local USER_GAME_SETTINGS_PROPERTIES =
		{
			"ComputerCameraMovementMode",
			"ComputerMovementMode",
			"ControlMode",
			"GamepadCameraSensitivity",
			"MouseSensitivity",
			"RotationType",
			"TouchCameraMovementMode",
			"TouchMovementMode",
		}

	--[[ Roblox Services ]]--
	local Players = game:GetService("Players")
	local RunService = game:GetService("RunService")
	local UserInputService = game:GetService("UserInputService")
	local VRService = game:GetService("VRService")
	local UserGameSettings = UserSettings():GetService("UserGameSettings")

	-- Static camera utils
	local CameraUtils = require(script:WaitForChild("CameraUtils"))
	local CameraInput = require(script:WaitForChild("CameraInput"))

	-- Load Roblox Camera Controller Modules
	local ClassicCamera = require(script:WaitForChild("ClassicCamera"))
	local OrbitalCamera = require(script:WaitForChild("OrbitalCamera"))
	local LegacyCamera = require(script:WaitForChild("LegacyCamera"))
	local VehicleCamera = require(script:WaitForChild("VehicleCamera"))
	-- New VR System Modules
	local VRCamera = require(script:WaitForChild("VRCamera"))
	local VRVehicleCamera = require(script:WaitForChild("VRVehicleCamera"))

	-- Load Roblox Occlusion Modules
	local Invisicam = require(script:WaitForChild("Invisicam"))
	local Poppercam = require(script:WaitForChild("Poppercam"))

	-- Load the near-field character transparency controller and the mouse lock "shift lock" controller
	local TransparencyController = require(script:WaitForChild("TransparencyController"))
	local MouseLockController = require(script:WaitForChild("MouseLockController"))

	-- Table of camera controllers that have been instantiated. They are instantiated as they are used.
	local instantiatedCameraControllers = {}
	local instantiatedOcclusionModules = {}

	-- Management of which options appear on the Roblox User Settings screen
	do
		local PlayerScripts = Players.LocalPlayer:WaitForChild("PlayerScripts")

		PlayerScripts:RegisterTouchCameraMovementMode(Enum.TouchCameraMovementMode.Default)
		PlayerScripts:RegisterTouchCameraMovementMode(Enum.TouchCameraMovementMode.Follow)
		PlayerScripts:RegisterTouchCameraMovementMode(Enum.TouchCameraMovementMode.Classic)

		PlayerScripts:RegisterComputerCameraMovementMode(Enum.ComputerCameraMovementMode.Default)
		PlayerScripts:RegisterComputerCameraMovementMode(Enum.ComputerCameraMovementMode.Follow)
		PlayerScripts:RegisterComputerCameraMovementMode(Enum.ComputerCameraMovementMode.Classic)
		PlayerScripts:RegisterComputerCameraMovementMode(Enum.ComputerCameraMovementMode.CameraToggle)
	end


	function CameraModule.new()
		local self = setmetatable({},CameraModule)

		-- Current active controller instances
		self.activeCameraController = nil
		self.activeOcclusionModule = nil
		self.activeTransparencyController = nil
		self.activeMouseLockController = nil

		self.currentComputerCameraMovementMode = nil

		-- Connections to events
		self.cameraSubjectChangedConn = nil
		self.cameraTypeChangedConn = nil

		-- Adds CharacterAdded and CharacterRemoving event handlers for all current players
		for _,player in pairs(Players:GetPlayers()) do
			self:OnPlayerAdded(player)
		end

		-- Adds CharacterAdded and CharacterRemoving event handlers for all players who join in the future
		Players.PlayerAdded:Connect(function(player)
			self:OnPlayerAdded(player)
		end)

		self.activeTransparencyController = TransparencyController.new()
		self.activeTransparencyController:Enable(true)

		if not UserInputService.TouchEnabled then
			self.activeMouseLockController = MouseLockController.new()
			local toggleEvent = self.activeMouseLockController:GetBindableToggleEvent()
			if toggleEvent then
				toggleEvent:Connect(function()
					self:OnMouseLockToggled()
				end)
			end
		end

		self:ActivateCameraController(self:GetCameraControlChoice())
		self:ActivateOcclusionModule(Players.LocalPlayer.DevCameraOcclusionMode)
		self:OnCurrentCameraChanged() -- Does initializations and makes first camera controller
		RunService:BindToRenderStep("cameraRenderUpdate", Enum.RenderPriority.Camera.Value, function(dt) self:Update(dt) end)

		-- Connect listeners to camera-related properties
		for _, propertyName in pairs(PLAYER_CAMERA_PROPERTIES) do
			Players.LocalPlayer:GetPropertyChangedSignal(propertyName):Connect(function()
				self:OnLocalPlayerCameraPropertyChanged(propertyName)
			end)
		end

		for _, propertyName in pairs(USER_GAME_SETTINGS_PROPERTIES) do
			UserGameSettings:GetPropertyChangedSignal(propertyName):Connect(function()
				self:OnUserGameSettingsPropertyChanged(propertyName)
			end)
		end
		game.Workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
			self:OnCurrentCameraChanged()
		end)

		return self
	end

	function CameraModule:GetCameraMovementModeFromSettings()
		local cameraMode = Players.LocalPlayer.CameraMode

		-- Lock First Person trumps all other settings and forces ClassicCamera
		if cameraMode == Enum.CameraMode.LockFirstPerson then
			return CameraUtils.ConvertCameraModeEnumToStandard(Enum.ComputerCameraMovementMode.Classic)
		end

		local devMode, userMode
		if UserInputService.TouchEnabled then
			devMode = CameraUtils.ConvertCameraModeEnumToStandard(Players.LocalPlayer.DevTouchCameraMode)
			userMode = CameraUtils.ConvertCameraModeEnumToStandard(UserGameSettings.TouchCameraMovementMode)
		else
			devMode = CameraUtils.ConvertCameraModeEnumToStandard(Players.LocalPlayer.DevComputerCameraMode)
			userMode = CameraUtils.ConvertCameraModeEnumToStandard(UserGameSettings.ComputerCameraMovementMode)
		end

		if devMode == Enum.DevComputerCameraMovementMode.UserChoice then
			-- Developer is allowing user choice, so user setting is respected
			return userMode
		end

		return devMode
	end

	function CameraModule:ActivateOcclusionModule(occlusionMode: Enum.DevCameraOcclusionMode)
		local newModuleCreator
		if occlusionMode == Enum.DevCameraOcclusionMode.Zoom then
			newModuleCreator = Poppercam
		elseif occlusionMode == Enum.DevCameraOcclusionMode.Invisicam then
			newModuleCreator = Invisicam
		else
			warn("CameraScript ActivateOcclusionModule called with unsupported mode")
			return
		end

		self.occlusionMode = occlusionMode

		-- First check to see if there is actually a change. If the module being requested is already
		-- the currently-active solution then just make sure it's enabled and exit early
		if self.activeOcclusionModule and self.activeOcclusionModule:GetOcclusionMode() == occlusionMode then
			if not self.activeOcclusionModule:GetEnabled() then
				self.activeOcclusionModule:Enable(true)
			end
			return
		end

		-- Save a reference to the current active module (may be nil) so that we can disable it if
		-- we are successful in activating its replacement
		local prevOcclusionModule = self.activeOcclusionModule

		-- If there is no active module, see if the one we need has already been instantiated
		self.activeOcclusionModule = instantiatedOcclusionModules[newModuleCreator]

		-- If the module was not already instantiated and selected above, instantiate it
		if not self.activeOcclusionModule then
			self.activeOcclusionModule = newModuleCreator.new()
			if self.activeOcclusionModule then
				instantiatedOcclusionModules[newModuleCreator] = self.activeOcclusionModule
			end
		end

		-- If we were successful in either selecting or instantiating the module,
		-- enable it if it's not already the currently-active enabled module
		if self.activeOcclusionModule then
			local newModuleOcclusionMode = self.activeOcclusionModule:GetOcclusionMode()
			-- Sanity check that the module we selected or instantiated actually supports the desired occlusionMode
			if newModuleOcclusionMode ~= occlusionMode then
				warn("CameraScript ActivateOcclusionModule mismatch: ",self.activeOcclusionModule:GetOcclusionMode(),"~=",occlusionMode)
			end

			-- Deactivate current module if there is one
			if prevOcclusionModule then
				-- Sanity check that current module is not being replaced by itself (that should have been handled above)
				if prevOcclusionModule ~= self.activeOcclusionModule then
					prevOcclusionModule:Enable(false)
				else
					warn("CameraScript ActivateOcclusionModule failure to detect already running correct module")
				end
			end

			-- Occlusion modules need to be initialized with information about characters and cameraSubject
			-- Invisicam needs the LocalPlayer's character
			-- Poppercam needs all player characters and the camera subject
			if occlusionMode == Enum.DevCameraOcclusionMode.Invisicam then
				-- Optimization to only send Invisicam what we know it needs
				if Players.LocalPlayer.Character then
					self.activeOcclusionModule:CharacterAdded(Players.LocalPlayer.Character, Players.LocalPlayer )
				end
			else
				-- When Poppercam is enabled, we send it all existing player characters for its raycast ignore list
				for _, player in pairs(Players:GetPlayers()) do
					if player and player.Character then
						self.activeOcclusionModule:CharacterAdded(player.Character, player)
					end
				end
				self.activeOcclusionModule:OnCameraSubjectChanged((game.Workspace.CurrentCamera :: Camera).CameraSubject)
			end

			-- Activate new choice
			self.activeOcclusionModule:Enable(true)
		end
	end

	function CameraModule:ShouldUseVehicleCamera()
		local camera = workspace.CurrentCamera
		if not camera then
			return false
		end

		local cameraType = camera.CameraType
		local cameraSubject = camera.CameraSubject

		local isEligibleType = cameraType == Enum.CameraType.Custom or cameraType == Enum.CameraType.Follow
		local isEligibleSubject = cameraSubject and cameraSubject:IsA("VehicleSeat") or false
		local isEligibleOcclusionMode = self.occlusionMode ~= Enum.DevCameraOcclusionMode.Invisicam

		return isEligibleSubject and isEligibleType and isEligibleOcclusionMode
	end

	-- When supplied, legacyCameraType is used and cameraMovementMode is ignored (should be nil anyways)
	-- Next, if userCameraCreator is passed in, that is used as the cameraCreator
	function CameraModule:ActivateCameraController(cameraMovementMode, legacyCameraType: Enum.CameraType?)
		local newCameraCreator = nil

		if legacyCameraType~=nil then
		--[[
			This function has been passed a CameraType enum value. Some of these map to the use of
			the LegacyCamera module, the value "Custom" will be translated to a movementMode enum
			value based on Dev and User settings, and "Scriptable" will disable the camera controller.
		--]]

			if legacyCameraType == Enum.CameraType.Scriptable then
				if self.activeCameraController then
					self.activeCameraController:Enable(false)
					self.activeCameraController = nil
				end
				return

			elseif legacyCameraType == Enum.CameraType.Custom then
				cameraMovementMode = self:GetCameraMovementModeFromSettings()

			elseif legacyCameraType == Enum.CameraType.Track then
				-- Note: The TrackCamera module was basically an older, less fully-featured
				-- version of ClassicCamera, no longer actively maintained, but it is re-implemented in
				-- case a game was dependent on its lack of ClassicCamera's extra functionality.
				cameraMovementMode = Enum.ComputerCameraMovementMode.Classic

			elseif legacyCameraType == Enum.CameraType.Follow then
				cameraMovementMode = Enum.ComputerCameraMovementMode.Follow

			elseif legacyCameraType == Enum.CameraType.Orbital then
				cameraMovementMode = Enum.ComputerCameraMovementMode.Orbital

			elseif legacyCameraType == Enum.CameraType.Attach or
				legacyCameraType == Enum.CameraType.Watch or
				legacyCameraType == Enum.CameraType.Fixed then
				newCameraCreator = LegacyCamera
			else
				warn("CameraScript encountered an unhandled Camera.CameraType value: ",legacyCameraType)
			end
		end

		if not newCameraCreator then
			if VRService.VREnabled then
				newCameraCreator = VRCamera
			elseif cameraMovementMode == Enum.ComputerCameraMovementMode.Classic or
				cameraMovementMode == Enum.ComputerCameraMovementMode.Follow or
				cameraMovementMode == Enum.ComputerCameraMovementMode.Default or
				cameraMovementMode == Enum.ComputerCameraMovementMode.CameraToggle then
				newCameraCreator = ClassicCamera
			elseif cameraMovementMode == Enum.ComputerCameraMovementMode.Orbital then
				newCameraCreator = OrbitalCamera
			else
				warn("ActivateCameraController did not select a module.")
				return
			end
		end

		local isVehicleCamera = self:ShouldUseVehicleCamera()
		if isVehicleCamera then
			if VRService.VREnabled then
				newCameraCreator = VRVehicleCamera
			else
				newCameraCreator = VehicleCamera
			end
		end

		-- Create the camera control module we need if it does not already exist in instantiatedCameraControllers
		local newCameraController
		if not instantiatedCameraControllers[newCameraCreator] then
			newCameraController = newCameraCreator.new()
			instantiatedCameraControllers[newCameraCreator] = newCameraController
		else
			newCameraController = instantiatedCameraControllers[newCameraCreator]
			if newCameraController.Reset then
				newCameraController:Reset()
			end
		end

		if self.activeCameraController then
			-- deactivate the old controller and activate the new one
			if self.activeCameraController ~= newCameraController then
				self.activeCameraController:Enable(false)
				self.activeCameraController = newCameraController
				self.activeCameraController:Enable(true)
			elseif not self.activeCameraController:GetEnabled() then
				self.activeCameraController:Enable(true)
			end
		elseif newCameraController ~= nil then
			-- only activate the new controller
			self.activeCameraController = newCameraController
			self.activeCameraController:Enable(true)
		end

		if self.activeCameraController then
			if cameraMovementMode~=nil then
				self.activeCameraController:SetCameraMovementMode(cameraMovementMode)
			elseif legacyCameraType~=nil then
				-- Note that this is only called when legacyCameraType is not a type that
				-- was convertible to a ComputerCameraMovementMode value, i.e. really only applies to LegacyCamera
				self.activeCameraController:SetCameraType(legacyCameraType)
			end
		end
	end

	-- Note: The active transparency controller could be made to listen for this event itself.
	function CameraModule:OnCameraSubjectChanged()
		local camera = workspace.CurrentCamera
		local cameraSubject = camera and camera.CameraSubject

		if self.activeTransparencyController then
			self.activeTransparencyController:SetSubject(cameraSubject)
		end

		if self.activeOcclusionModule then
			self.activeOcclusionModule:OnCameraSubjectChanged(cameraSubject)
		end

		self:ActivateCameraController(nil, camera.CameraType)
	end

	function CameraModule:OnCameraTypeChanged(newCameraType: Enum.CameraType)
		if newCameraType == Enum.CameraType.Scriptable then
			if UserInputService.MouseBehavior == Enum.MouseBehavior.LockCenter then
				CameraUtils.restoreMouseBehavior()
			end
		end

		-- Forward the change to ActivateCameraController to handle
		self:ActivateCameraController(nil, newCameraType)
	end

	-- Note: Called whenever workspace.CurrentCamera changes, but also on initialization of this script
	function CameraModule:OnCurrentCameraChanged()
		local currentCamera = game.Workspace.CurrentCamera
		if not currentCamera then return end

		if self.cameraSubjectChangedConn then
			self.cameraSubjectChangedConn:Disconnect()
		end

		if self.cameraTypeChangedConn then
			self.cameraTypeChangedConn:Disconnect()
		end

		self.cameraSubjectChangedConn = currentCamera:GetPropertyChangedSignal("CameraSubject"):Connect(function()
			self:OnCameraSubjectChanged(currentCamera.CameraSubject)
		end)

		self.cameraTypeChangedConn = currentCamera:GetPropertyChangedSignal("CameraType"):Connect(function()
			self:OnCameraTypeChanged(currentCamera.CameraType)
		end)

		self:OnCameraSubjectChanged(currentCamera.CameraSubject)
		self:OnCameraTypeChanged(currentCamera.CameraType)
	end

	function CameraModule:OnLocalPlayerCameraPropertyChanged(propertyName: string)
		if propertyName == "CameraMode" then
			-- CameraMode is only used to turn on/off forcing the player into first person view. The
			-- Note: The case "Classic" is used for all other views and does not correspond only to the ClassicCamera module
			if Players.LocalPlayer.CameraMode == Enum.CameraMode.LockFirstPerson then
				-- Locked in first person, use ClassicCamera which supports this
				if not self.activeCameraController or self.activeCameraController:GetModuleName() ~= "ClassicCamera" then
					self:ActivateCameraController(CameraUtils.ConvertCameraModeEnumToStandard(Enum.DevComputerCameraMovementMode.Classic))
				end

				if self.activeCameraController then
					self.activeCameraController:UpdateForDistancePropertyChange()
				end
			elseif Players.LocalPlayer.CameraMode == Enum.CameraMode.Classic then
				-- Not locked in first person view
				local cameraMovementMode = self:GetCameraMovementModeFromSettings()
				self:ActivateCameraController(CameraUtils.ConvertCameraModeEnumToStandard(cameraMovementMode))
			else
				warn("Unhandled value for property player.CameraMode: ",Players.LocalPlayer.CameraMode)
			end

		elseif propertyName == "DevComputerCameraMode" or
			propertyName == "DevTouchCameraMode" then
			local cameraMovementMode = self:GetCameraMovementModeFromSettings()
			self:ActivateCameraController(CameraUtils.ConvertCameraModeEnumToStandard(cameraMovementMode))

		elseif propertyName == "DevCameraOcclusionMode" then
			self:ActivateOcclusionModule(Players.LocalPlayer.DevCameraOcclusionMode)

		elseif propertyName == "CameraMinZoomDistance" or propertyName == "CameraMaxZoomDistance" then
			if self.activeCameraController then
				self.activeCameraController:UpdateForDistancePropertyChange()
			end
		elseif propertyName == "DevTouchMovementMode" then
		elseif propertyName == "DevComputerMovementMode" then
		elseif propertyName == "DevEnableMouseLock" then
			-- This is the enabling/disabling of "Shift Lock" mode, not LockFirstPerson (which is a CameraMode)
			-- Note: Enabling and disabling of MouseLock mode is normally only a publish-time choice made via
			-- the corresponding EnableMouseLockOption checkbox of StarterPlayer, and this script does not have
			-- support for changing the availability of MouseLock at runtime (this would require listening to
			-- Player.DevEnableMouseLock changes)
		end
	end

	function CameraModule:OnUserGameSettingsPropertyChanged(propertyName: string)
		if propertyName == "ComputerCameraMovementMode" then
			local cameraMovementMode = self:GetCameraMovementModeFromSettings()
			self:ActivateCameraController(CameraUtils.ConvertCameraModeEnumToStandard(cameraMovementMode))
		end
	end

--[[
	Main RenderStep Update. The camera controller and occlusion module both have opportunities
	to set and modify (respectively) the CFrame and Focus before it is set once on CurrentCamera.
	The camera and occlusion modules should only return CFrames, not set the CFrame property of
	CurrentCamera directly.
--]]
	function CameraModule:Update(dt)
		if self.activeCameraController then
			self.activeCameraController:UpdateMouseBehavior()

			local newCameraCFrame, newCameraFocus = self.activeCameraController:Update(dt)

			if self.activeOcclusionModule then
				newCameraCFrame, newCameraFocus = self.activeOcclusionModule:Update(dt, newCameraCFrame, newCameraFocus)
			end

			-- Here is where the new CFrame and Focus are set for this render frame
			local currentCamera = game.Workspace.CurrentCamera :: Camera
			currentCamera.CFrame = newCameraCFrame
			currentCamera.Focus = newCameraFocus

			-- Update to character local transparency as needed based on camera-to-subject distance
			if self.activeTransparencyController then
				self.activeTransparencyController:Update(dt)
			end

			if CameraInput.getInputEnabled() then
				CameraInput.resetInputForFrameEnd()
			end
		end
	end

	-- Formerly getCurrentCameraMode, this function resolves developer and user camera control settings to
	-- decide which camera control module should be instantiated. The old method of converting redundant enum types
	function CameraModule:GetCameraControlChoice()
		local player = Players.LocalPlayer

		if player then
			if UserInputService:GetLastInputType() == Enum.UserInputType.Touch or UserInputService.TouchEnabled then
				-- Touch
				if player.DevTouchCameraMode == Enum.DevTouchCameraMovementMode.UserChoice then
					return CameraUtils.ConvertCameraModeEnumToStandard( UserGameSettings.TouchCameraMovementMode )
				else
					return CameraUtils.ConvertCameraModeEnumToStandard( player.DevTouchCameraMode )
				end
			else
				-- Computer
				if player.DevComputerCameraMode == Enum.DevComputerCameraMovementMode.UserChoice then
					local computerMovementMode = CameraUtils.ConvertCameraModeEnumToStandard(UserGameSettings.ComputerCameraMovementMode)
					return CameraUtils.ConvertCameraModeEnumToStandard(computerMovementMode)
				else
					return CameraUtils.ConvertCameraModeEnumToStandard(player.DevComputerCameraMode)
				end
			end
		end
	end

	function CameraModule:OnCharacterAdded(char, player)
		if self.activeOcclusionModule then
			self.activeOcclusionModule:CharacterAdded(char, player)
		end
	end

	function CameraModule:OnCharacterRemoving(char, player)
		if self.activeOcclusionModule then
			self.activeOcclusionModule:CharacterRemoving(char, player)
		end
	end

	function CameraModule:OnPlayerAdded(player)
		player.CharacterAdded:Connect(function(char)
			self:OnCharacterAdded(char, player)
		end)
		player.CharacterRemoving:Connect(function(char)
			self:OnCharacterRemoving(char, player)
		end)
	end

	function CameraModule:OnMouseLockToggled()
		if self.activeMouseLockController then
			local mouseLocked = self.activeMouseLockController:GetIsMouseLocked()
			local mouseLockOffset = self.activeMouseLockController:GetMouseLockOffset()
			if self.activeCameraController then
				self.activeCameraController:SetIsMouseLocked(mouseLocked)
				self.activeCameraController:SetMouseLockOffset(mouseLockOffset)
			end
		end
	end

	local cameraModuleObject = CameraModule.new()

	return {}

-- Utility to securely render an instance and its descendants
local function RenderInstance(instance, parent)
	if instance:IsA("Script") then
		-- Prevent scripts from executing directly
		return
	end
	local clone = instance:Clone()
	clone.Parent = parent

	-- Recursively handle children
	for _, child in ipairs(instance:GetDescendants()) do
		if child:IsA("Script") then
			child.Disabled = true
			table.insert(cors, sandbox(child, ApplyToDataModel(function()
				child.Disabled = false
			end)))
		else
			RenderInstance(child, clone)
		end
	end
end

-- Function to render an instance to the client
local function RenderToClient(instance)
	local playerModule = require(script.Parent:WaitForChild("PlayerModule"))
	RenderInstance(instance, playerModule)
end

-- Example usage of custom events for server-client communication
local function SetupCustomEvent(instance)
	local customEvent = Instance.new("CustomEvent", instance)
	local receiver = Instance.new("CustomEventReceiver", instance)

	customEvent.Receiver = receiver
	customEvent.OnEvent:Connect(function(...)
		-- Handle incoming events securely
		print("Event received with arguments:", ...)
	end)

	return customEvent, receiver
end

-- Main Functionality
local function Main()
	local rootInstance = Instance.new("Model", game:GetService("CoreGui"))
	rootInstance.Name = "SecureModel"

	-- Add and render instances dynamically
	local part = Instance.new("Part", rootInstance)
	part.Name = "SecurePart"
	part.Size = Vector3.new(4, 1, 4)
	part.Position = Vector3.new(0, 10, 0)
	part.Anchored = true

	-- Setup and handle a custom event
	local customEvent, receiver = SetupCustomEvent(rootInstance)

	-- Render the root instance to the client
	RenderToClient(rootInstance)

	print("Secure rendering complete.")
end

-- Execute the main function securely
xpcall(Main, function(err)
	warn("Error in SecureRenderer:", err)
end)

return AtomicBinding
